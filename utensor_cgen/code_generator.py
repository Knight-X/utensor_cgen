# -*- coding:utf8 -*-
import os
from tempfile import NamedTemporaryFile

import idx2numpy as idx2np
import numpy as np
import tensorflow as tf
from tensorflow.core.framework.graph_pb2 import GraphDef
from tensorflow.tools.graph_transforms import TransformGraph

from .operators import OperatorFactory
from .transformer import NamescopeTransformer, OptimizerFactory
from .ir import uTensorGraph
from .snippets import (CommentSnippet, ContextHeaderSnippet,
                       ContextSnippetsContainer, CreateTensorIdxSnippet)
from .snippets.composer import Composer

__all__ = ["CodeGenerator"]


class CodeGenerator(object):
  def __init__(self, model_file,
               idx_dir,
               embed_data_dir,
               method,
               output_nodes,
               debug_cmt=False,
               **kwargs):
    self.model_file = model_file
    if not os.path.exists(idx_dir):
      os.makedirs(idx_dir)
    self.idx_dir = idx_dir
    self.embed_data_dir = embed_data_dir.rstrip("/")
    self.method = method
    self.output_nodes = output_nodes
    self.debug_cmt = debug_cmt

  def generate(self, src_fname):
    """Generate source and header files
    """
    fname, _ = os.path.splitext(src_fname)
    graph_name, ext = os.path.splitext(os.path.basename(self.model_file))
    guard_name = fname.replace('/', '_')
    header_snippet = ContextHeaderSnippet(guard_name, graph_name)

    composer = Composer()
    header_fname = '{}.hpp'.format(fname)
    header_name = os.path.basename(header_fname)
    container = ContextSnippetsContainer(graph_name, header_name)

    opFactory = OperatorFactory()

    if ext == '.pb':
      graph = self._tf_load_graph_def(self.model_file)
    else:
      raise ValueError('Expecting pb file')
    ugraph = uTensorGraph(graph, self.output_nodes)
    print("Transforming graph: {}".format(self.model_file))
    quant_ugraph = self._transform_graph(ugraph)
    print('Graph transormation done')

    # # FIXME: adapting new IR
    for op_id, (op_name, op_info, ref_counts, to_eval) in enumerate(construct_order, 1):
      op_type = op_info.op_type
      if op_type == "Placeholder":
        out_tname = op_info.output_tensor[0].name
        ref_count = ref_counts[0]
        container.template_vars["placeholders"].append(out_tname)
        container.template_vars["ref_counts"].append(ref_count)
        header_snippet.template_vars["placeholders"].append(out_tname)
      elif op_type == 'Const':
        out_tname, out_dtype, _ = op_info.output_tensor[0]
        ref_count = ref_counts[0]
        pre_tname = self._prepare_tensor_name(out_tname)
        idx_fname = "{}.idx".format(pre_tname)
        snippet = CreateTensorIdxSnippet(self.embed_data_dir, out_tname,
                                         idx_fname=idx_fname,
                                         tf_dtype=out_dtype,
                                         ref_count=ref_count)
        container.add_snippet(snippet)
        idx_path = os.path.join(self.idx_dir, idx_fname)
        value = op_info.output_content[out_tname]
        self._tf_save_data(idx_path, value, out_dtype)
      else:
        snippet = opFactory.createOperatorSnippet(op_info, ref_counts, to_eval)
        container.add_snippet(snippet)

      if self.debug_cmt:
        comments = ["<<< Operation id {}: {}".format(op_id, op_name),
                    ">>> Operation id {}: {}".format(op_id + 1, op_name)]
        cmt_snippet = CommentSnippet(comments)
        container.add_snippet(cmt_snippet)
    composer.add_snippet(container)

    print("Generate header file: {}".format(header_fname))
    with open(header_fname, "w") as wf:
      wf.write('// Auto generated by utensor-cli\n\n')
      wf.write(header_snippet.render())
    print("Generate source file: {}".format(src_fname))
    with open(src_fname, "w") as wf:
      wf.write('// Auto generated by utensor-cli\n\n')
      wf.write(composer.compose())

  def _transform_graph(self, ugraph):
    dropout_transformer = NamescopeTransformer('dropout')
    new_graph = dropout_transformer.transform(ugraph)
    quant_graph_def = TransformGraph(input_graph_def=new_graph.graph_def,
                                     inputs=[],
                                     outputs=self.output_nodes,
                                     transforms=["quantize_weights", "quantize_nodes"])
    quant_graph = uTensorGraph(quant_graph_def, self.output_nodes)
    quant_graph = OptimizerFactory(method=self.method).transform(quant_graph)
    return quant_graph

  def _tf_load_graph_def(self, pb_fname):
    with tf.gfile.FastGFile(pb_fname, 'rb') as fid:
      graph_def = tf.GraphDef()
      graph_def.ParseFromString(fid.read())
    return graph_def

  def _tf_prepare_tensor_name(self, tensor_name):
    """Replace all ':' and '/' with '_' in a given tensor name
    """
    prepared = tensor_name.replace(":", "_").replace("/", "_")
    return prepared

  def _tf_save_data(self, path, value, tf_dtype):
    if tf_dtype in [tf.uint8, tf.qint8, tf.quint8]:
      np_dtype = np.uint8
    elif tf_dtype in [tf.int32, tf.qint32]:
      np_dtype = np.int32
    else:
      np_dtype = np.float32

    if value.shape == ():
      value = np.array([value], dtype=np_dtype)
    else:
      value = value.astype(np_dtype)
    with open(path, "wb") as fid:
      idx2np.convert_to_file(fid, value)
    print("saving {}".format(path))
